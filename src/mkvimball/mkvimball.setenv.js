/*
 * This file is placed in the public domain
 *
 * Generated by Vim script mkvimball
 * (www.vim.org/scripts/script.php?script_id=4219).
 *
 * Windows script file to add/remove an extension on
 * the system or user environment variable PATHEXT
 * (or PATH).
 */

//    input file contents marker: a7ec181d243150b7e40823f224174a281f46e986
// setenv script contents marker: 617493c406a7202032244442ec727c0a93ce1bf6

// Check for Windows Script Host
if (typeof WScript == 'undefined' || WScript == null)
    throw 'setevn.js script runs under Windows Scripting Host with JScript engine.';

try
{

    if (WScript.Arguments.Count() != 2 && WScript.Arguments.Count() != 3)
    {
	WScript.Echo
	    (
		"Syntax:\r\n"
		    +
		"\t" + WScript.ScriptName + " { [-]SYSTEM | [-]USER } .ext [PATH | PATHEXT]\r\n\r\n"
		    +
		"Adds/removes[-] file extension .ext to the PATHEXT environment variable, in the specified\r\n"
		    +
		"environment (SYSTEM or USER)."
	    );
	WScript.Quit(255);
    }

    // Read environment name from command line (SYSTEM or USER)
    if (WScript.Arguments(0).charAt(0) == '-')
    {
	var remove_entry = true;
	var environment = WScript.Arguments(0).substring(1);
    }
    else
    {
	var remove_entry = false;
	var environment = WScript.Arguments(0);
    }

    if (environment.toUpperCase() == 'USER')
	var reg_key = 'HKCU\\Environment';
    else
	if (environment.toUpperCase() == 'SYSTEM')
	    var reg_key = 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment';
	else
	    throw 'Environment name should be one of "USER" or "SYSTEM".';

    // Access the selected environement
    var WshShell = WScript.CreateObject("WScript.Shell");

    try
    {
        var WshEnv = WshShell.Environment(environment);
    }
    catch(ex)
    {
        var msg = "Failed to read " + environment + " environment.\r\n";
        for (p in ex)
            if (p != 'description')
            {
        	msg += p + ": " + ex[p] + "\r\n";
            }

        try
        {
            WScript.StdErr.Write(msg);
        }
        catch (ex)
        {
            WScript.Echo(msg);
        }

        WScript.Quit(254);
    }

    // Read the environment variable name from the command line
    var env_var = WScript.Arguments.Count() == 3 ? WScript.Arguments(2) : 'PATHEXT';

    // Check the environment for the presence of the given variable
    var var_components_string = null;

    for (var env_it = new Enumerator(WshEnv); ! env_it.atEnd(); env_it.moveNext())
	if
	    (
		env_it.item().substring(0, env_var.length+1).toLowerCase()
		    ==
		env_var.toLowerCase() + '='
	    )
	{
	    // env_var found
	    var_components_string = WshEnv(env_var);
	    break;
	}

    // Add/Remove component to/from the env_var value
    if (var_components_string === null)
    {
        if (remove_entry)
	    ;	// entry already removed, return success
	else
	    // create variable and add entry
	    if (environment.toUpperCase() == 'USER' && env_var.toUpperCase() != 'PATH')
		// Merge USER env_var with the SYSTEM env_var
		// The semicolon ';' will appear redundant whenever the SYSTEM env_var
		// is empty.
		WshEnv(env_var) = '%' + env_var + '%;' + WScript.Arguments(1);
	    else
		WshEnv(env_var) = WScript.Arguments(1);
    }
    else
    {
        var
            components = var_components_string.split(';'),
            componentLowerCase = WScript.Arguments(1).toLowerCase();

        if (remove_entry)
        {
            var removed_entry = false;

            for (var idx in components)
        	if (components[idx].toLowerCase() == componentLowerCase)
        	{
        	    delete components[idx];
        	    removed_entry = true;
        	}

            if (removed_entry)
            {
        	var i = 0;

		splice = false;
		for (var idx in components)
		{
		    if (parseInt(idx) != i)
			components[i] = components[idx];
		    i++;
		}

		components.splice(i, components.length - i);

        	WshEnv(env_var) = components.join(';');

		if
		    (
			environment.toUpperCase() == 'USER'
			    &&
			WshEnv(env_var).toLowerCase() == '%' + env_var.toLowerCase() + '%'
		    )
		{
		    // var should probably be removed now
		    WshEnv.Remove(env_var);
		    try
		    {
			// Should check reg key exists first
			// WshShell.RegDelete(reg_key + '\\' + env_var);
		    }
		    catch(ex)
		    {
			try
			{
			    WScript.StdErr.Write('Warning: Failed to remove environment variable.');
			}
			catch (ex)
			{
			    WScript.Echo('Warning: Failed to remove environment variable.');
			}
		    }
		}
	    }
        }
        else
        {
	    // add component to existing list

            for (var idx in components)
        	if (components[idx].toLowerCase() == componentLowerCase)
        	{
        	    // PATH or PATHEXT component is already present
        	    componentLowerCase = null;
        	    break;
        	}

            if (componentLowerCase != null)
            {
        	components.push(WScript.Arguments(1));
        	WshEnv(env_var) = components.join(';');
            }
        }
    }
}
catch(ex)
{
    var msg = "Script error.\r\n";
    for (p in ex)
	if (p != 'description')
	{
	    msg += p + ": " + ex[p] + "\r\n";
	}

    try
    {
	WScript.StdErr.Write(msg);
    }
    catch (ex)
    {
	WScript.Echo(msg);
    }

    WScript.Quit(254);
}
