/*
 * This file is placed in the public domain.
 *
 * Generated by the mkvimball vim script
 * (www.vim.org/scripts/script.php?script_id=4219).
 *
 * Windows JScript file used as a wrapper to launch
 * Vim in ex mode to execute a given .vim script file.
 *
 * Script should be run with either cscript.exe or
 * wscript.exe, or only by its name in a Windows
 * command prompt.
 *
 * Temporarily adds the following directories on PATH:
 *
 *  @[HKLM\SOFTWARE\Vim\Gvim\path]
 *  @[@[@[HKCR\Vim.Application\CurVer]\CLSID\@]\LocalServer32]
 *  %VIMRUNTIME%
 *  %VIMRUNTIME%\vim[0-9]+\
 *  %ProgramFilesW6432%\Vim\vim[0-9]+\
 *  %ProgramFiles%\Vim\vim[0-9]+\
 *  %ProgramFiles(x86)%\Vim\vim[0-9]+\
 *
 * if they exist, and then searches Vim on PATH and
 * compose command line for vim in ex mode (command
 * mode) and in silent mode also, passes any
 * associated .vim script file to be sourced, and
 * all given command line arguments, if any.
 * The command is then written to StdOut, and
 * the wrapper .cmd file will then execute it.
 *
 * Used:
 *  - for Windows file associations (based on file
 *    extensions), to associate .vim/.vimcmd scripts with
 *    vim (even if Vim is not on %PATH%), or
 *  - just to launch a given .vim script, without any file
 *    associations in place.
 */

// input file contents marker: a7ec181d243150b7e40823f224174a281f46e986
//  js script contents marker: 28e4f0caa6040c6e9b5f06577d4bfd4f5d1cd858

// Check for Windows Script Host
if (typeof WScript == 'undefined' || WScript == null)
    throw 'mkvimball.exim.js script runs under Windows Scripting Host with JScript engine.';

try
{
    var fileSystemObject = WScript.CreateObject("Scripting.FileSystemObject");
    var WshShell = WScript.CreateObject("WScript.Shell");
    var WshEnv = WshShell.Environment("Process");

    // Returns true if subdirectory exists at the given path
    function hasSubdir(dirName, subdir)
    {
	return fileSystemObject.FolderExists(fileSystemObject.BuildPath(dirName, subdir));
    }

    // Returns subdirectory matching regular expression
    function matchSubdir(dirName, subdir_re)
    {
	var dirlist = new Enumerator(fileSystemObject.GetFolder(dirName).SubFolders);

	while (!dirlist.atEnd())
	{
	    if (subdir_re.test(dirlist.item()))
		// Subdirectory found
		return dirlist.item();

	    dirlist.moveNext();
	}

	return false;
    }

    function getIndexOf(arr, val)
    {
	for (var i in arr)
	    if (arr[i] == val)
		return i;

	return -1;
    }

    // Search for a Vim installation in the given directory (normally
    // C:\Program Files, and add it to WshEnv("PATH") if found
    function appendProgramFilesDir(ProgramFilesDir, isVimRuntime)
    {
	if (ProgramFilesDir != '' && fileSystemObject.FolderExists(ProgramFilesDir))
	{
	    var VimRuntimeDir;

	    if (isVimRuntime)
		VimRuntimeDir = ProgramFilesDir;
	    else
		if (hasSubdir(ProgramFilesDir, 'Vim'))
		    VimRuntimeDir = fileSystemObject.BuildPath(ProgramFilesDir, 'Vim');
		else
		    return;

	    var vimdir = matchSubdir(VimRuntimeDir, /\\vim\d+$/);

	    if (vimdir != false)
	    {
		var pathList = WshEnv("PATH").split(';');

		if (WshEnv("PATH") == '')
		    pathList = new Array();

		if (getIndexOf(pathList, vimdir) < 0)
		{
		    pathList.push(vimdir);
		    WshEnv("PATH") = pathList.join(';')
		}
	    }
	}
    }

    // Adds the given vimExeDir on PATH if not already included and if present on
    // file system
    function checkVimDir(vimExeDir)
    {
	var pathList = WshEnv("PATH").split(';')

	if (WshEnv("PATH") == '')
	    pathList = new Array();

	if
	    (
		fileSystemObject.FolderExists(vimExeDir)
		    &&
		getIndexOf(pathList, vimExeDir) < 0
	    )
	{
	    pathList.push(vimExeDir);
	    WshEnv("PATH") = pathList.join(';');
	}
    }

    function ReadRegKey(key_name)
    {
	try
	{
	    var keyVal = WshShell.RegRead(key_name);
	}
	catch (ex)
	{
	    return null;
	}

	if (keyVal)
	    return keyVal;
	else
	    return null;
    }

    // Read Vim install directory from Windows registry
    function GetVimInstallDir()
    {
	var gvim_exe = ReadRegKey('HKLM\\SOFTWARE\\Vim\\Gvim\\path');

	if (gvim_exe)
	    return fileSystemObject.GetParentFolderName(gvim_exe);
	else
	    return null;
    }

    // Read Vim OLE server directory from Windows registry
    function GetVimOleServerDir()
    {
	var keyVal = ReadRegKey('HKCR\\Vim.Application\\CurVer\\');
	var clsID, vimFile;


	if (keyVal)
	    // Read the version-specific CLSID if found
	    var clsID = ReadRegKey('HKCR\\' + keyVal + '\\CLSID\\');

	if (!clsID)
	    // Otherwise read the version-independent CLSID
	    var clsID = ReadRegKey('HKCR\\Vim.Application\\CLSID\\');

	if (clsID)
	{
	    var vimFile = ReadRegKey('HKCR\\CLSID\\' + clsID + '\\LocalServer\\');

	    if (!vimFile)
		vimFile = ReadRegKey('HKCR\\CLSID\\' + clsID + '\\InProcServer\\');
	    if (!vimFile)
		vimFile = ReadRegKey('HKCR\\CLSID\\' + clsID + '\\LocalServer32\\');
	    if (!vimFile)
		vimFile = ReadRegKey('HKCR\\CLSID\\' + clsID + '\\InProcServer32\\');

	    if (!vimFile)
		// It looks like this can also be a command line, though
		vimFile = ReadRegKey('HKCR\\Wow6432Node\\CLSID\\' + clsID + '\\LocalServer32\\');
	    if (!vimFile)
		// It looks like this can also be a command line, though
		vimFile = ReadRegKey('HKCR\\Wow6432Node\\CLSID\\' + clsID + '\\InProcServer32\\');

	    if (vimFile)
		var vimDir = fileSystemObject.GetParentFolderName(vimFile);
	    else
		var vimDir = null;

	    if (vimDir)
		return vimDir;
	    else
		return null;
	}

	return null;
    }

    // Remove .js extension from name of current file. The resulting name is expected to
    // be the .vim script to invoke.
    function composeVimScriptName()
    {
	return WScript.ScriptFullName.replace(/(.js|.vb|.vbs|.vba|.wsf|.wsh)$/, '');
    }

    checkVimDir(GetVimInstallDir());
    checkVimDir(GetVimOleServerDir());

    if (WshEnv("VIMRUNTIME") != '')
    {
	if (WshEnv("PATH") == '')
	    WshEnv("PATH") += WshEnv("VIMRUNTIME");
	else
	    WshEnv("PATH") += ";" + WshEnv("VIMRUNTIME");

	appendProgramFilesDir(WshEnv("VIMRUNTIME"), true);
    }

    appendProgramFilesDir(WshEnv("ProgramFilesW6432"));
    appendProgramFilesDir(WshEnv("ProgramFiles"));
    appendProgramFilesDir(WshEnv("ProgramFiles(x86)"));

    var vimExecutable = "vim";
    var vimScript_CmdLine = '"' + vimExecutable + '"';

    if (WScript.Arguments.Count() && WScript.Arguments(0) == '--explicit')
	    var arg_idx = 1;
	else
	{
	    var arg_idx = 0;
	    vimScript_CmdLine += ' -V1 -i NONE -u NORC -U NONE -nNesS "' + composeVimScriptName() + '" -c "echo\'\'" -c"execute\'qall\'.nr2char(33)"';
	}

    while (arg_idx < WScript.Arguments.Count())
    {
	// WScript.StdErr.WriteLine(WScript.Arguments(arg_idx));

	vimScript_CmdLine +=
	    ' "'
		+
	    WScript.Arguments(arg_idx).replace(/(\\*)"/g, '$1$1\\"').replace(/(\\*)$/, '$1$1')
		+
	    '"';

	arg_idx++;
    }

    vimScript_CmdLine = '"%COMSPEC%" /V:ON /S /C ^"' + vimScript_CmdLine + ' ^& Exit ^!ERRORLEVEL^!^"'

    try
    {
	WScript.StdOut.WriteLine('SetLocal');
	WScript.StdOut.WriteLine('PATH=' + WshEnv("PATH"));
	WScript.StdOut.WriteLine(vimScript_CmdLine);
	WScript.StdOut.WriteLine("Exit /B %ERRORLEVEL%");
    }
    catch (ex)
    {
	WScript.Echo
	    (
		'SetLocal\r\n'
		    +
		'PATH=' + WshEnv("PATH") + "\r\n"
		    +
		vimScript_CmdLine + "\r\n"
		    +
		"Exit /B %ERRORLEVEL%"
	    );
    }
}
catch(ex)
{
    var msg = "Script error.\r\n";
    for (p in ex)
	if (p != 'description')
	{
	    msg += p + ": " + ex[p] + "\r\n";
	}

    try
    {
	WScript.StdErr.Write(msg);
    }
    catch (ex)
    {
	WScript.Echo(msg);
    }

    WScript.Quit(254);
}
